#!/bin/bash

##### shell/OS detection

___is_osx()
{
    [ "$(uname)" = "Darwin" ] && return 0
    return 1
}

___is_linux()
{
    [ "$(uname)" = "Linux" ] && return 0
    return 1
}

___is_zsh()
{
    [ "$ZSH_NAME" = "zsh" ] && return 0
    return 1
}

___is_bash()
{
    [ "$BASH" = "$(which bash)" ] && return 0
    return 1
}

___is_ssh_session()
{
    if [ -n "$SSH_CONNECTION" ] || [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
        return 0
    fi
    return 1
}

___is_screen_session()
{
    if [ -n "$STY" ] || [ "$TERM" = "screen" ] || strstr "$TERMCAP" "screen"; then
        return 0
    fi
    return 1
}

___is_tmux_session()
{
    [ -n "$TMUX" ] && return 0
    return 1
}

___is_docker()
{
    [ -e /.dockerenv ]
}

___is_py_virtualenv()
{
    [ "$PIPENV_ACTIVE" = 1 ]
}

___is_virtual_environment()
{
    ___is_docker || \
            ___is_py_virtualenv || \
            [ -n "$VIRTUAL_ENV" ]
}

##### Other stuff

___git_status_all()
{
    local dir
    for dir in $(ls $GIT_DIR); do

        [ ! -d $GIT_DIR/$dir ] && continue

        # For not including specific repos in git_status_all
        if [ -r $GIT_DIR/.gsaignore ]; then
            #local dir_to_ignore
            for dir_to_ignore in $(cat $GIT_DIR/.gsaignore); do
                if [ "$dir_to_ignore" = "$dir" ]; then
                    continue 2
                fi
            done
        fi

        echo_yellow "${underline}*** $dir ***${nounderline}"

        local current_branch="$(cd $GIT_DIR/$dir && git branch | \
                grep "^ *\*" | \
                awk '{print $NF}')"

        #local branch
        for branch in $(cd $GIT_DIR/$dir && git branch | awk '{print $NF}'); do

            echo_blue "\t*** $branch ***"

            # run in a subshell, so the user's directory won't be changed
            (
            cd $GIT_DIR/$dir
            git checkout $branch >/dev/null 2>&1
            git status
            )
        done

        # change back to the original branch
        (
        cd $GIT_DIR/$dir && git checkout $current_branch >/dev/null 2>&1
        )
        
        echo ""
    done
    unset dir_to_ignore
}

run_quiet()
{
    "$@" >/dev/null 2>&1
}

toupper()
{
    tr '[:lower:]' '[:upper:]'
}

tolower()
{
    tr '[:upper:]' '[:lower:]'
}

isupper()
{
    # returns true if all of the letters in the string are upper case.
    # non-letter characters are ignored
    [ "${1//[a-z]}" = "$1" ] && return 0
    return 1
}

is_only_upper()
{
    [ "${1//[^A-Z]}" = "$1" ] && return 0
    return 1
}

islower()
{
    # returns true if all of the letters in the string are lower case.
    # non-letter characters are ignored
    [ "${1//[A-Z]}" = "$1" ] && return 0
    return 1
}

is_only_lower()
{
    # returns true if all of the characters are lower case letters
    [ "${1//[^a-z]}" = "$1" ] && return 0
    return 1
}

isdigit()
{
    [ -z "${1//[0-9]}" ] && return 0
    return 1
}

is_not_digit()
{
    # returns false if the string contains any digits
    [ "${1//[0-9]}" = "$1" ] && return 0
    return 1
}

startswith()
{
    [ "${1#$2*}" = "$1" ] && return 1
    return 0
}

endswith()
{
    [ "${1%*$2}" = "$1" ] && return 1
    return 0
}

strstr()
{
    [ "${1#*$2*}" = "$1" ] && return 1
    return 0
}

is_int()
{
    if [ $1 -eq $1 ] 2>/dev/null; then
        return 0
    fi
    return 1
}

func_exists()
{
    local _function="$1"

    if run_quiet type $_function; then
        return 0
    fi
    return 1
}

user_exists()
{
    local user="$1"

    if run_quiet id $user; then
        return 0
    fi
    return 1
}

is_root()
{
    if [ "$EUID" = 0 ]; then
        return 0
    fi
    return 1
}

mkdir_cd()
{
    local dir="$1"

    mkdir -p $dir && cd $dir
}

date_for_filename()
{
    date +"%Y-%m-%d_%H-%M-%S"
}

mod_date_for_filename()
{
    local filename="$1"

    python -c "import os, datetime; print(datetime.datetime.fromtimestamp(os.lstat('$filename').st_mtime).strftime('%Y-%m-%d_%H-%M-%S'))"
}

___ssh_remove_known_hosts_line()
{
    local line_num="$1"

    sed -i "${line_num}d" ~/.ssh/known_hosts
}

___find_files_exec_cmd()
{
    find . -type f -exec $@ {} \;
}

___find_files_exec_cmd_no_hidden()
{
    find [^.]* -type f -exec $@ {} \;
}

___filenames_spaces_to_underscores()
{
    local i
    for i in "$@"; do

        mv -- "$i" "${i// /_}"

    done
}

___tmux_send_to_all_panes()
{
    local pane
    for pane in $(tmux list-panes -F "#P"); do
        # XXX: If "$@" is used, spaces between arguments aren't sent to the 
        # panes and everything gets squashed into one word.
        tmux send-keys -t ${pane} "$*" Enter
    done
}

check_pipestatus_error()
{
    #                       zsh        bash
    if grep -q "[^0 ]" <<< "$pipestatus${PIPESTATUS[@]}"; then
        return 1
    else
        return 0
    fi
}

alias_value()
{
    local alias_name="$1"

    which "$alias_name" | sed "s/$alias_name: aliased to //"
    check_pipestatus_error
}

hex2dec()
{
    local n="$1"
    if ! startswith "$n" "0x"; then
        n="0x$n"
    fi

    if [ -t 1 ]; then
        local newline="\n"
    else
        local newline=""
    fi

    printf "%d$newline" "$n"
}

dec2hex()
{
    if [ -t 1 ]; then
        local newline="\n"
    else
        local newline=""
    fi

    printf "%x$newline" "$1"
}

___zsh_noglob()
{
    if ___is_zsh; then
        echo "noglob"
    fi
}

exists_in_path()
{
    which "$@" > /dev/null 2>&1
}

timestamp_to_date()
{
    local timestamp="$1"

    # XXX: `date -d @<timestamp>' doesn't work on OS X.
    python -c "import datetime; print datetime.datetime.fromtimestamp(float('$timestamp')).strftime('%Y-%m-%d %H:%M:%S')"
}

url_decode()
{
    python -c "import urllib; print urllib.unquote('$1').decode('utf8')"
}

mktempcd()
{
    local prefix="${1:-/tmp/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX}"
    local dir="$(mktemp -d "$prefix")"
    if [ $? -ne 0 ] || [ -z "$dir" ]; then
        return 1
    fi

    cd "$dir"
}

is_case_insensitive_filesystem()
{
    local name="fortytwo"

    local tmp_dir="$(mktemp -d /tmp/XXXXXXXXXXXXXXXX)"
    touch "$tmp_dir/$name"
    touch "$tmp_dir/$(toupper <<< "$name")"

    local file_count="$(ls "$tmp_dir" | wc -l | sed "s/ //g")"
    rm -r "$tmp_dir"

    case "$file_count" in
        1) return 0;;
        2) return 1;;
        *)
            echo_error "Invalid file count: $file_count"
            return 99
            ;;
    esac
}

create_rsync_script()
{
    local script="$DOTFILES_DIR/bin/rsync.sh"
    {
    echo '#!/bin/bash'
    echo
    echo "$(alias_value r) \"\$@\""
    } > "$script"
    chmod +x "$script"
}

edit_which()
{
    local cmd="$1"

    # XXX: In zsh on Mac OS X you can't get the output of command substitution
    # and the exit status of the command.
    #local full_path="$(which "$cmd")"
    #local rc=$?
    #if [ $rc -ne 0 ]; then
    #    return $rc
    #fi
    if ! which "$cmd" > /dev/null; then
        # To make things worse, in zsh on Mac OS X the '* not found' error
        # message is sent to stdout, not stderr, so I need this separate
        # message as a backup because I can't count on the one from `which'.
        echo_error "'$cmd' not found in \$PATH."
        return 1
    fi

    "$EDITOR" "$(which "$cmd")"
}

append_PATH()
{
    local dir
    for dir in "$@"; do
        export PATH="${PATH%:}:$dir"
    done
}

append_PYTHONPATH()
{
    local dir
    for dir in "$@"; do
        export PYTHONPATH="${PYTHONPATH%:}:$dir"
    done
}

##### Completion functions

_gen_complist()
{
    local cur="${COMP_WORDS[COMP_CWORD]}"

    compgen -W "$*" -- "$cur"
}

_gen_filename_complist()
{
    compgen -f -- "${COMP_WORDS[COMP_CWORD]}"
}

_sh_completion()
{
    COMPREPLY=( $(_gen_complist "$@") )
}

_sh_completion_with_filenames()
{
    COMPREPLY=( $(_gen_complist "$@") $(_gen_filename_complist) )
}

_get_simple_completion_options()
{
    local file_name="$1"

    $file_name -h | grep -o -- "--[a-zA-Z0-9_-]\+"
}

_get_py_argparse_completion_options()
{
    _get_simple_completion_options "$1"
}

_simple_sh_completion()
{
    _sh_completion_with_filenames "$(_get_simple_completion_options "$1")"
}

_gen_complist_multi_option()
{
    local COMP_LIST_DELIMITER="${COMP_LIST_DELIMITER:-,}"
    local cur="${COMP_WORDS[COMP_CWORD]}"

    if grep -q "$COMP_LIST_DELIMITER" <<< "$cur"; then
        local full_options="${cur%$COMP_LIST_DELIMITER*}"
        local partial_option="${cur##*$COMP_LIST_DELIMITER}"
    else
        local full_options=""
        local partial_option="$cur"
    fi

    local -a options_list
    if [ -n "$full_options" ]; then
        local arg
        for arg in "$@"; do
            options_list=("${options_list[@]}" "$full_options$COMP_LIST_DELIMITER$arg")
        done
    else
        options_list=("$@")
    fi

    _gen_complist "${options_list[@]}"
}

_sh_completion_multi_option()
{
    COMPREPLY=( $(_gen_complist_multi_option "$@") )
}

if ___is_osx; then

    # Additional functions that are only sourced if running on Mac OS X.
    
    secure_rm()
    {
        srm --zero "$@"
    }

    get_image_size()
    {
        local image

        for image in "$@"; do

            sips -g pixelHeight -g pixelWidth "$image" | sed "s/^ *//"

        done
    }

elif ___is_linux; then

    # Additional functions that are only sourced if running on Linux.
    
    secure_rm()
    {
        if run_quiet which shred; then
            shred --zero --remove "$@"
        else
            echo_error "Error! Shred is not installed on $(hostname)."
            echo_error "${FUNCNAME[0]} requires shred in order to work."
            echo_error "No files were deleted."
            return 1
        fi
    }

    create_shadow_digest()
    {
        local pass="$1"
        local salt="$2"

        python -c "import crypt; print crypt.crypt('$pass', '$salt')"
    }

fi

if ___is_zsh; then
    newest_file()
    {
        local dir="${1:-}"
        if [ "${#dir}" -gt 0 ] && ! endswith "$dir" "/"; then
            dir="$dir/"
        fi

        \ls -tr -- "$dir"*(-^/) | tail -1
    }
fi
