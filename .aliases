#!/bin/bash

alias rc="echo \$?"

if ___is_zsh; then
    alias rp="echo \$pipestatus"
elif ___is_bash; then
    alias rp="echo \${PIPESTATUS[*]}"
fi

# Print 200 new lines before clearing the screen, for dealing with the problem
# when changing screen resolutions.
alias c="printf '\n%.0s' {1..200}; clear"

alias lns="wc -l"
alias wl="wc -l"

alias nocolor='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"'

# Removes 'clear screen' escape codes from output.
alias noclear="sed 's/\x1B\[[HJ]//g'"

# the '-A' flag prevents the encoded output from being split into multiple lines
alias b64="openssl enc -base64 -A"
alias b64d="base64 --decode"

alias gpg-e="gpg --cipher-algo AES256 --symmetric | openssl enc -base64 -A" # encrypt
alias gpg-d="base64 --decode | gpg" # decrypt

alias gpgs="gpg --symmetric --cipher-algo AES256 --armor"

alias gpg-list-recipients="gpg --no-default-keyring --secret-keyring /dev/null -a --list-only"

# Convert the slash between the size of the key and the key ID to a space so 
# the key ID can be selected with a double click.
alias gk="gpg -k --keyid-format 0xlong | sed '/^[sp]ub\s/ {s|/| |1;}'"
alias gK="gpg -K --keyid-format 0xlong | sed '/^\(ssb\|sec\)[#>]\?\s/ {s|/| |1;}'"

alias ge="gpg -eavr"
alias geh="gpg -eavR"

if ___is_osx; then
    # https://gpgtools.tenderapp.com/discussions/problems/30646-gpg-agent-gets-stuck-when-used-with-smartcards-in-ssh-agent-mode
    alias restart-gpg-agent="pgrep gpg-agent | xargs -L 1 kill -9 && ___load_gpg_agent && gpg -q < $DOTFILES_DIR/.gnupg/hello.txt.asc"
fi

alias py="python"
alias p="python"
alias pc="python -c"

alias tm="tmux"
# The 'a' needs to be escaped because of the 'a' alias.
alias ta="tmux \a -t"
alias tls="tmux ls"
alias tmux-all-panes="___tmux_send_to_all_panes"
alias tap="___tmux_send_to_all_panes"

alias l="less"

# Trim the ends of long lines so they won't wrap around. The '$' is escaped so
# $COLUMNS will be expanded dynamically for compatibility with changing terminal
# window sizes.
alias tl="cut -c1-\$COLUMNS"

alias mkx="chmod +x"

alias v="vi"
# Open a file in readonly mode, even if a swapfile exists.
alias vir="vi -M -n"

alias ma="make"
alias mb="make -B"

alias uu="sort -u"

alias f="find"
alias find-files-exec-cmd="___find_files_exec_cmd"
alias ff="find-files-exec-cmd"
alias f.="find ."
alias f.g="find . | grep"

alias find-files-exec-cmd-no-hidden="___find_files_exec_cmd_no_hidden"
alias ffnh="find-files-exec-cmd-no-hidden"

alias spaces-to-underscores="___filenames_spaces_to_underscores"

if exists_in_path youtube-dl.sh; then
    alias y="$(___zsh_noglob) youtube-dl.sh"
    alias ys="$(___zsh_noglob) youtube-dl.sh --short-filename"
    alias ymax="$(___zsh_noglob) youtube-dl-max-res.sh"
    alias y3="$(___zsh_noglob) youtube-dl-mp3.sh"
    alias yp="$(alias_value y) --use-proxy"
    alias ysp="$(___zsh_noglob) youtube-dl.sh --use-proxy --short-filename"
    alias ymaxp="$(alias_value ymax) --use-proxy"
    alias ycc="$(___zsh_noglob) youtube-dl-cc.sh"
    alias y3p="$(alias_value y3) --use-proxy"
fi

##### grep, awk, sed ,tr

alias g="grep"
alias gi="grep -i"
alias gv="grep -v"

alias k="awk"
alias s="sed"


alias l2s="tr '\n' ' '" # convert newlines to spaces
alias s2l="tr ' ' '\n'" # convert spaces to newlines

alias rmnl="tr -d '\n'"
alias nlatend='sed "s/$/\\\n/"'

alias toupper="tr '[:lower:]' '[:upper:]'"
alias tolower="tr '[:upper:]' '[:lower:]'"

alias h="ssh"
alias hv="ssh -v"
alias hi="ssh -i"
alias sshr="ssh -l root"
alias sshnokey="ssh -o PubkeyAuthentication=no"
alias scpnokey="scp -o PubkeyAuthentication=no"
if [ -n "$GPG_SSH_AUTH_SOCK" ]; then
    alias ssh-gpg="SSH_AUTH_SOCK=$GPG_SSH_AUTH_SOCK ssh"
    alias sshg="$(alias_value "ssh-gpg")"
    alias hg="$(alias_value "ssh-gpg")"
    alias ssh-add-gpg="SSH_AUTH_SOCK=$GPG_SSH_AUTH_SOCK ssh-add"
    alias scpg="SSH_AUTH_SOCK=$GPG_SSH_AUTH_SOCK scp"
fi
if ___is_osx; then
    alias hh="restart-gpg-agent && ssh"
fi

alias r="rsync -vvae ssh --progress --human-readable --partial-dir='$RSYNC_PARTIAL_DIR'"

alias convert-ssh-key-to-pem="ssh-keygen -e -m PKCS8 -f"

alias ssh-remove-known-hosts-line="___ssh_remove_known_hosts_line"

alias sk="ssh-keygen"

##### Changing directories

alias cdc="clear; cd"

alias ..="cd ../"
alias ...="cd ../../"
alias ....="cd ../../../"
alias .....="cd ../../../../"
alias ......="cd ../../../../../"
alias .......="cd ../../../../../../"

alias -- -="cd -"

alias desk="cd ~/Desktop/"
alias deskc="clear; cd ~/Desktop/"

alias down="cd ~/Downloads/"
alias downc="clear; cd ~/Downloads/"

alias docs="cd ~/Documents/"
alias docsc="clear; cd ~/Documents/"

if [ -d ~/Dropbox ]; then
    alias drop="cd ~/Dropbox/"
    alias dropc="clear; cd ~/Dropbox/"
fi

alias cds="cd ~/.ssh/"
alias cdsc="clear; cd ~/.ssh/"

if [ -n "$OMERS_STUFF" ]; then
    alias os="cd $OMERS_STUFF/"
    alias osc="clear; cd $OMERS_STUFF/"
fi

if [ -n "$DOTFILES_DIR" ]; then
    alias dfd="cd $DOTFILES_DIR"
    alias dfdc="clear; cd $DOTFILES_DIR"
fi

if [ -n "$GIT_DIR" ]; then
    alias cdg="cd $GIT_DIR"
    alias cdgc="clear; cd $GIT_DIR"
fi
if [ -n "$GOPATH" ]; then
    alias cdgo="cd $GOPATH/src/github.com/omersne/"
fi

alias md="mkdir"
alias mk="mkdir"

alias mkcd="mkdir_cd"

##### ls

alias la="ls -lah"
alias cla="clear; $(alias_value la)"
alias ltr="$(alias_value la) -tr"
alias lad="$(alias_value la) -d */"


##### Git

alias gsa="___git_status_all"
alias cgsa="clear; gsa"

alias gs="git status"
alias cgs="clear; git status"
alias tgs="time git status"

alias gc="git commit -m"
alias gsc="git commit -S -m"
alias gnsc="git commit --no-gpg-sign -m"
alias gp="git pull-and-verify-sigs"
alias gh="git push"
alias ga="git add"
alias gaa="git add --all"
alias gb="git branch"
alias gch="git checkout"
alias gcht="git checkout --track"
alias gd="git diff"
alias gw="$DOTFILES_DIR/utils/git-show.sh"
alias gl="git lg"
alias gg="git grep"
alias gbl="git blame"
alias gap="git apply"
alias gcl="git clone"

alias git-clear-cred-cache="git credential-cache exit"
alias git-cred-cache-timeout-0="git config credential.helper 'cache --timeout=0'"


if ___is_osx; then

    # Additional aliases that are only sourced if running on OSX

    if [ -n "$DOTFILES_DIR" ]; then
        ### Volume control. Uses volume_control_osx.sh
        OSX_VOLUME_CONTROL_SCRIPT=$DOTFILES_DIR/osx/volume_control_osx.sh

        if [ -x $OSX_VOLUME_CONTROL_SCRIPT ]; then
            alias vol="$OSX_VOLUME_CONTROL_SCRIPT --set"
            #alias v="$OSX_VOLUME_CONTROL_SCRIPT --set"

            alias vu="$OSX_VOLUME_CONTROL_SCRIPT --increase-by"
            alias vd="$OSX_VOLUME_CONTROL_SCRIPT --decrease-by"

            alias mute="$OSX_VOLUME_CONTROL_SCRIPT --toggle"

            # short aliases for changing the volume to a specific 
            # percentage (v1 = 1%, v2 = 2%, v3 = 3%...)
            for percent in {1..100}; do
                alias "v$percent=$OSX_VOLUME_CONTROL_SCRIPT --set $percent"
                alias "vu$percent=$OSX_VOLUME_CONTROL_SCRIPT --increase-by $percent"
                alias "vd$percent=$OSX_VOLUME_CONTROL_SCRIPT --decrease-by $percent"
            done
            unset percent
        fi

        [ -x $DOTFILES_DIR/osx/toggle_scroll_direction.scpt ] && \
                alias scroll="$DOTFILES_DIR/osx/toggle_scroll_direction.scpt"

    fi
    
    # Requires gnu coreutils [brew install coreutils]
    alias tr='gtr'

    # requires GNU sed [brew install gnu-sed]
    alias sed='gsed'
    
    # requires GNU coreutils on OSX [brew install coreutils]
    alias ls='gls --color=auto --time-style="+%Y-%m-%d %H:%M:%S"'
    
    # for OSX versions before El Capitan
    alias _flush-dns-cache="sudo discoveryutil mdnsflushcache; sudo discoveryutil udnsflushcaches"

    alias flush-dns-cache-el-capitan="sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder"

    if which rstrip-newline > /dev/null 2>&1; then
        alias pbcopy="rstrip-newline | pbcopy"
    fi
    alias pb="pbcopy"

    alias wifi-off="set-wifi-state.sh off"
    alias wf="$(alias_value wifi-off)"
    alias wifi-on="set-wifi-state.sh on"
    alias wn="$(alias_value wifi-on)"

elif ___is_linux; then

    # Additional aliases that are only sourced if running on Linux.

    #alias restart-nscd='sudo /etc/init.d/nscd restart'
    alias nscd-restart="sudo /usr/sbin/service nscd restart"

    alias ls='ls --color=auto --time-style="+%Y-%m-%d %H:%M:%S"'

    alias remap-ctrl="$DOTFILES_DIR/linux/remap_ctrl.sh"

    alias x="xclip -selection clipboard"

    if [ -n "$DOTFILES_DIR" ]; then
        ### Volume control. Uses volume_control_linux.sh

        LINUX_VOLUME_CONTROL_SCRIPT=${LINUX_VOLUME_CONTROL_SCRIPT:-$DOTFILES_DIR/linux/volume_control_linux.sh}

        if [ -x $LINUX_VOLUME_CONTROL_SCRIPT ]; then
            alias vol="$LINUX_VOLUME_CONTROL_SCRIPT --set"
            #alias v="$LINUX_VOLUME_CONTROL_SCRIPT --set"

            alias vu="$LINUX_VOLUME_CONTROL_SCRIPT --increase-by"
            alias vd="$LINUX_VOLUME_CONTROL_SCRIPT --decrease-by"

            alias mute="$LINUX_VOLUME_CONTROL_SCRIPT --toggle"

            # short aliases for changing the volume to a specific 
            # percentage (v1 = 1%, v2 = 2%, v3 = 3%...)
            for percent in {1..100}; do
                alias "v$i=$LINUX_VOLUME_CONTROL_SCRIPT --set $i"
                alias "vu$i=$LINUX_VOLUME_CONTROL_SCRIPT --increase-by $i"
                alias "vd$i=$LINUX_VOLUME_CONTROL_SCRIPT --decrease-by $i"
            done
            unset percent
        fi
    fi

fi

