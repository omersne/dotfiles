[alias]
	a = add
	aa = add --all
	add-remote = remote add origin
	amend = commit --amend
	b = branch
	backup-branch = "!f() { local name=\"$(git rev-parse --abbrev-ref HEAD)_BACKUP_$(date '+%Y-%m-%d_%H-%M-%S')\"; git branch \"$name\" && echo \"Backed up the current branch to '$name'\"; }; f"
	br = branch
	branches-with-commit = branch -r --contains
	c = commit -m
	sc = commit -S -m
	ch = checkout
	chb = checkout -b
	cht = checkout --track
	clear-cred-cache = credential-cache exit
	co = config
	debug-comments = grep -i "DEBUG42"
	df = diff --color --color-words --abbrev
	d = diff
	email = config user.email
	fp = format-patch --stdout
	gpgsign = config commit.gpgsign
	h = push

	lg = log --color --pretty=format:'%C(63)%h%Creset - %Cgreen%ci%Creset - %C(208)%an <%ae>%Creset\n%C(226)[%G?] %C(45)%GS %GK%Creset\n%B' --

	lg2 = log --color --graph --pretty=format:'%C(63)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci)%Creset - %C(208)%an <%ae>%Creset' --abbrev-commit --

	list-remote-branches = "!git ls-remote | grep 'refs/heads/' | sed 's|.*\trefs/heads/||'"
	loc = "!git grep '^' | wc -l | tr -d ' '"
	sloc = "!git grep '.' | wc -l | tr -d ' '"
	logsig = log --show-signature
	lrb = ls-remote origin
	name = config user.name
	p = pull
	pull-and-verify-sigs = "!f() { last=$(git rev-parse HEAD); git pull || return 1; for c in $(git rev-list $last..HEAD); do git verify-commit $c > /dev/null 2>&1 || { echo \"\n\n-----\nBAD SIGNATURE IN COMMIT $c\n-----\nTo return to safety, run this: \\`git reset --hard $last'\" >&2; return 99; }; done; }; f"
	puo = push -u origin
	rb = rebase
	reset-last-commit = commit --amend --no-edit --reset-author
	s = status
	safe-hard-reset = "!git backup-branch && git fetch --all && git reset --hard \"origin/$(git rev-parse --abbrev-ref HEAD)\""
	sb = status -sb
	signingkey = config user.signingkey
	skey = config user.signingkey
	squash-latest = "!f() { count=$1; shift; git reset --soft HEAD~$count && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\" \"$@\"; }; f"
	w = show

[branch]
	#autosetuprebase = always

[core]
	excludesfile = ~/.gitignore

	# http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
	trustctime = false

	editor = vim

[color]
	ui = auto

[color "branch"]
	current = green
	local = white
	#remote = green

[color "diff"]
	meta = 208
	frag = cyan
	old = red
	new = green

[color "status"]
	added = yellow
	changed = green
	untracked = red

[credential]
	helper = cache --timeout=0

[include]
	path = ~/.gitconfig.local

[push]
	default = simple

[user]
	# Require setting user.name and user.email explicitly for each repo:
	#useconfigonly = true
